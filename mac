#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

# shellcheck disable=SC3043

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

# Determine Homebrew prefix
arch="$(uname -m)"
if [ "$arch" = "arm64" ]; then
  HOMEBREW_PREFIX="/opt/homebrew"
else
  HOMEBREW_PREFIX="/usr/local"
fi

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != "$HOMEBREW_PREFIX/bin/zsh" ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

# checks architecture
if [ "$(uname -m)" = "arm64" ]
  then
  # checks if Rosetta is already installed
  if ! pkgutil --pkg-info=com.apple.pkg.RosettaUpdateAuto > /dev/null 2>&1
  then
    echo "Installing Rosetta"
    # Installs Rosetta2
    softwareupdate --install-rosetta --agree-to-license
  else
    echo "Rosetta is installed"
  fi
fi


gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    append_to_zshrc "eval \"\$($HOMEBREW_PREFIX/bin/brew shellenv)\""

    export PATH="$HOMEBREW_PREFIX/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"


# Unix
brew "git"
brew "openssl"
brew "zsh"
brew "the_silver_searcher"
brew "vim"
brew "watchman"


# GitHub CLI & Desktop
brew "gh"
cask "github"


# Programming
brew "nvm"
cask "visual-studio-code"
cask "tableplus"
cask "docker-desktop"
cask "dbeaver-community"
cask "db-browser-for-sqlite"
cask "mysqlworkbench"
cask "bruno"
cask "warp"
cask "miniconda"
cask "cursor"
cask "warp"


# Browsers
cask "firefox"
cask "google-chrome"
cask "responsively"
cask "zen"
cask "tor-browser"

# Photo/Video/Audio
cask "gluemotion"
cask "affinity-designer@1"
cask "affinity-photo@1"
cask "audacity"
cask "obs"


# Entertainment
cask "spotify"
cask "makemkv"
cask "calibre"
cask "vlc"
cask "steam"

# Note Taking & Tracking
cask "notion"
cask "notion-calendar"
cask "ticktick"
cask "obsidian"
cask "antinote"


# Productivity Apps
brew "tailscale"
cask "alt-tab"
cask "raycast"
cask "monitorcontrol"
cask "istat-menus"
cask "aldente"
cask "balenaetcher"
cask "bitwarden"
cask "raspberry-pi-imager"
cask "keymapp"
cask "insta360-link-controller"
cask "yubico-authenticator"
cask "yubico-yubikey-manager"
cask "clockify"
cask "windows-app"
cask "bartender"
cask "libreoffice"


# Communication Apps
cask "signal"
cask "slack"
cask "discord"
cask "microsoft-teams"
cask "zoom"


# Personal 
cask "qflipper"
cask "micro-snitch"


# Programming language prerequisites and package managers
brew "libyaml" # should come after openssl
brew "coreutils"
brew "yarn"


# Databases
brew "postgresql@14", restart_service: :changed
brew "redis", restart_service: :changed
EOF

# Programming
fancy_echo "Opening app download links ..."
open "https://apps.apple.com/us/app/xcode/id497799835?mt=12/" # Xcode App Store




# Photo/Video
open "https://apps.apple.com/us/app/pixelmator-pro/id1289583905?mt=12" # Pixelmator Pro App Store
open "https://www.apple.com/final-cut-pro/trial/" # Final Cut Pro Trial


# Note Taking
open "https://apps.apple.com/app/apple-store/id1287445660?pt=118414812&ct=agenda_com&mt=8" # Agenda
open "https://www.instapaper.com/save" # Instapaper Firefox Extension
open "https://apps.apple.com/us/app/instapaper/id288545208" # Instapaper App Store
open "https://apps.apple.com/app/id1529448980" # Reeder App Store
open "https://apps.apple.com/us/app/notability/id360593530" # Notability App Store
open "https://apps.apple.com/app/apple-store/id1444383602?pt=525432&ct=goodnotes.com&mt=8" # Goodnotes
open "https://addons.mozilla.org/en-US/firefox/addon/web-clipper-obsidian/" # Obsidian Web Clipper
open "https://getdarkmatter.dev/download" # Darkmatter


# Productivity
open "https://apps.apple.com/us/app/magnet/id441258766?mt=12" # Magnet App Store
open "https://apps.apple.com/us/app/gestimer-legacy/id990588172" # Gestimer App Store
open "https://reolink.com/software-and-manual/" # Reolink Client


# Misc
open "https://apps.apple.com/us/app/callsheet-find-cast-crew/id1672356376" # Callsheet
open "https://apps.apple.com/us/app/little-snitch-mini/id1629008763?mt=12&ct=odweb" # Little Snitch Mini
open "https://filezilla-project.org/download.php?platform=macos-arm64" # Filezilla


fancy_echo "Configuring asdf version manager ..."
if [ ! -d "$HOME/.asdf" ]; then
  brew install asdf
  append_to_zshrc "source $(brew --prefix asdf)/libexec/asdf.sh" 1
fi

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin list | grep -Fq "$name"; then
    asdf plugin add "$name" "$url"
  else
    asdf plugin update "$name"
  fi
}

# shellcheck disable=SC1091
. "$(brew --prefix asdf)/libexec/asdf.sh"
add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list all "$language" | grep -E "^[0-9]+\.[0-9]+\.[0-9]+$" | tail -1)"
   					  

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf set --home "$language" "$version"
  fi
}

#fancy_echo "Installing latest Ruby ..."
install_asdf_language "ruby"
gem update --system
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing latest Node ..."
install_asdf_language "nodejs"

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1091
  . "$HOME/.laptop.local"
fi